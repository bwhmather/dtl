#pragma once

#include "dtl-location.h"

#define DTL_AST_CLASS_MASK 0x78000000

#define DTL_AST_CLASS_LITERAL (1 << 27)
#define DTL_AST_CLASS_COLUMN_NAME (2 << 27)
#define DTL_AST_CLASS_EXPRESSION (3 << 27)
#define DTL_AST_CLASS_COLUMN_BINDING (4 << 27)
#define DTL_AST_CLASS_TABLE_BINDING (5 << 27)
#define DTL_AST_CLASS_JOIN_CONSTRAINT (6 << 27)
#define DTL_AST_CLASS_TABLE_EXPRESSION (7 << 27)
#define DTL_AST_CLASS_STATEMENT (8 << 27)

enum dtl_ast_node_type {
    DTL_AST_NAME = 1,
    DTL_AST_STRING,

    DTL_AST_TABLE_NAME,
    DTL_AST_DISTINCT_CLAUSE,
    DTL_AST_COLUMN_BINDING_LIST,
    DTL_AST_FROM_CLAUSE,
    DTL_AST_JOIN_CLAUSE,
    DTL_AST_WHERE_CLAUSE,
    DTL_AST_GROUP_BY_CLAUSE,
    DTL_AST_GROUP_CONSECUTIVE_BY_CLAUSE,
    DTL_AST_EXPRESSION_LIST,
    DTL_AST_SCRIPT,

    DTL_AST_INT_LITERAL = DTL_AST_CLASS_LITERAL,
    DTL_AST_STRING_LITERAL,

    DTL_AST_UNQUALIFIED_COLUMN_NAME = DTL_AST_CLASS_COLUMN_NAME,
    DTL_AST_QUALIFIED_COLUMN_NAME,

    DTL_AST_COLUMN_REFERENCE_EXPRESSION = DTL_AST_CLASS_EXPRESSION,
    DTL_AST_LITERAL_EXPRESSION,
    DTL_AST_FUNCTION_CALL_EXPRESSION,
    DTL_AST_EQUAL_TO_EXPRESSION,
    DTL_AST_LESS_THAN_EXPRESSION,
    DTL_AST_LESS_THAN_OR_EQUAL_EXPRESSION,
    DTL_AST_GREATER_THAN_EXPRESSION,
    DTL_AST_GREATER_THAN_OR_EQUAL_EXPRESSION,
    DTL_AST_ADD_EXPRESSION,
    DTL_AST_SUBTRACT_EXPRESSION,
    DTL_AST_MULTIPLY_EXPRESSION,
    DTL_AST_DIVIDE_EXPRESSION,

    DTL_AST_WILDCARD_COLUMN_BINDING = DTL_AST_CLASS_COLUMN_BINDING,
    DTL_AST_IMPLICIT_COLUMN_BINDING,
    DTL_AST_ALIASED_COLUMN_BINDING,

    DTL_AST_IMPLICIT_TABLE_BINDING = DTL_AST_CLASS_TABLE_BINDING,
    DTL_AST_ALIASED_TABLE_BINDING,

    DTL_AST_JOIN_ON_CONSTRAINT = DTL_AST_CLASS_JOIN_CONSTRAINT,
    DTL_AST_JOIN_USING_CONSTRAINT,

    DTL_AST_SELECT_EXPRESSION = DTL_AST_CLASS_TABLE_EXPRESSION,
    DTL_AST_IMPORT_EXPRESSION,
    DTL_AST_TABLE_REFERENCE_EXPRESSION,

    DTL_AST_ASSIGNMENT_STATEMENT = DTL_AST_CLASS_STATEMENT,
    DTL_AST_UPDATE_STATEMENT,
    DTL_AST_DELETE_STATEMENT,
    DTL_AST_INSERT_STATEMENT,
    DTL_AST_EXPORT_STATEMENT,
    DTL_AST_BEGIN_STATEMENT,
};

struct dtl_ast_node {
    enum dtl_ast_node_type type;

    struct dtl_location start;
    struct dtl_location end;

    size_t children_length;
    struct dtl_ast_node *children[];
};

struct dtl_ast_node *
dtl_ast_node_create(enum dtl_ast_node_type type);

struct dtl_ast_node *
dtl_ast_node_append(struct dtl_ast_node *container, struct dtl_ast_node *child);

void
dtl_ast_node_destroy(struct dtl_ast_node *node);

